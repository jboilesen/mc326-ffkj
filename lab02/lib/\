#include "lib.h"

/*Funcao que verifica o tamanho real da string, nao conta os  espacos a direita da ultima letra.
  -Parametro 1: string a ser verificada
  Feita por: Richard Keller
18:30 p.m. 29/03/2009*/
int verificaTamanho(char * word){
    int i;
    for(i = strlen(word); i>0 && word[i-1] == BLANK ; i--);
    return i;
}

Aluno *createAluno(char *reg){
    
    Aluno *ret = (Aluno*) malloc(sizeof(Aluno));
    
    ret->ra = (char*) malloc(RA_SIZE*sizeof(char));
    memcpy(ret->ra, reg, RA_SIZE);
    reg += RA_SIZE+1;

    
    ret->nome = (char*) malloc(NOME_SIZE*sizeof(char));
    memcpy(ret->nome, reg, NOME_SIZE);
    ret->nome[verificaTamanho(ret->nome)] = '\0';
    reg += NOME_SIZE;
    printf("%c", reg[0]); 
    ret->cidade = (char*) malloc(CIDADE_SIZE*sizeof(char));
    memcpy(ret->cidade, reg, CIDADE_SIZE);
    ret->cidade[verificaTamanho(ret->cidade)] = '\0';
    reg += CIDADE_SIZE;

    ret->telres = (char*) malloc(TELRES_SIZE*sizeof(char));
    memcpy(ret->telres, reg, TELRES_SIZE);
    ret->telres[ verificaTamanho( ret->telres ) ] = '\0';
    reg += TELRES_SIZE+1;

    printf("%s", reg);
    ret->telalt = (char*) malloc(TELALT_SIZE*sizeof(char));
    memcpy(ret->telalt, reg, TELALT_SIZE);
    ret->telalt[ verificaTamanho( ret->telalt ) ] = '\0';
    reg += TELALT_SIZE+1;

    printf("%s", reg);
    ret->sexo = (char*) malloc(SEXO_SIZE*sizeof(char));
    memcpy(ret->sexo, reg, SEXO_SIZE);
    reg += SEXO_SIZE+1;

    printf("%s", reg);
    ret->curso = (char*) malloc(CURSO_SIZE*sizeof(char));
    memcpy(ret->curso, reg, CURSO_SIZE);
    reg += CURSO_SIZE;
    printf("%s", reg);
    
    return ret;
}

char* leituraCampoFixo(char* word,int size,int* NcaracteresEntrada1, FILE* file){
    int i;
    for(i=0;i<size-1;i++){
        word[i] = fgetc(file);
        if(NcaracteresEntrada1 !=NULL)
            *NcaracteresEntrada1 +=1;
    }
    word[i]='\0';

    return word;
}

void gravaCampoCompacto(char* word,int* Ncaracteres2, FILE* novo, int* contador){
    int i;
    int size=verificaTamanho(word);

    fputc('<', novo);
    fprintf (novo,"%d",size+1);
    fputc('>', novo);
    fputc('<', novo);
    fprintf (novo,"%d",*contador);
    fputc('>', novo);
    for(i=0;i<size-1;i++){
        fputc(word[i],novo);
        *Ncaracteres2+=1;
    }
    *contador+=1;
}

int gera_arq_comp (char *fileInPath, char *fileOutPath, int* Ncaracteres2){

    Aluno *aluno;
    char *reg[69];

    int count;
    count=1;

    FILE *file = fopen(fileInPath, "r");
    FILE *novo = fopen(fileOutPath, "w");    

    while(1){
        //Parte 1 - Leitura
        fread(reg, 1, REG_SIZE, file);
        aluno = createAluno(reg);
        printf("%s%s%s%s%s%s%s\n", aluno->ra, aluno->nome, aluno->cidade, aluno->telres, aluno->telalt, aluno->sexo, aluno->curso);
        return 0;
       
        //Parte 2 - Escrita
    }
}


void gravaCampoComSep(char* word,int* Ncaracteres1, FILE* novo){
    int i;
    int size=verificaTamanho(word);
    for(i=0;i<size-1;i++){
        fputc(word[i],novo);
        *Ncaracteres1+=1;
    }
    fputc(SEPARADOR,novo);
    *Ncaracteres1+=1;
}

int gera_arq_com_separador(char *fileInPath, char *fileOutPath, int* Nregistro, int* NcaracteresEntrada1, int* Ncaracteres1){
/*    char aux, aux2;
    t_register estrutura;

    FILE *file = fopen(fileInPath, "r");
    FILE *novo = fopen(fileOutPath, "w");

    while(1){
             //Parte 1 - Leitura
              strcpy(estrutura.ra,leituraCampoFixo(estrutura.ra,RA_size,NcaracteresEntrada1, file));//RA
              aux = fgetc(file);//leitura de espaço em branco
              *NcaracteresEntrada1 +=1; 
              strcpy(estrutura.nome,leituraCampoFixo(estrutura.nome,NOME_size,NcaracteresEntrada1, file));//NOME
              strcpy(estrutura.cidade,leituraCampoFixo(estrutura.cidade,CIDADE_size,NcaracteresEntrada1, file));//CIDADE
              strcpy(estrutura.telres,leituraCampoFixo(estrutura.telres,TELRES_size,NcaracteresEntrada1, file));//TELEFONE RESIDENCIAL
              aux = fgetc(file);//leitura de espaço em branco
              *NcaracteresEntrada1 +=1;
              strcpy(estrutura.telalt,leituraCampoFixo(estrutura.telalt,TELALT_size,NcaracteresEntrada1, file));//TELEFONE ALTERNATIVO
              aux = fgetc(file);//leitura de espaço em branco
              *NcaracteresEntrada1 +=1;
              estrutura.sexo = fgetc(file);//SEXO
              *NcaracteresEntrada1 +=1;
              aux = fgetc(file);//leitura de espaço em branco
              *NcaracteresEntrada1 +=1;
              strcpy(estrutura.curso,leituraCampoFixo(estrutura.curso,CURSO_size,NcaracteresEntrada1, file));//CURSO
              aux = fgetc(file);// aux recebe o '#'
              
              *NcaracteresEntrada1 +=1;
              aux2 = fgetc(file);// aux2 recebe '\n' ou EOF ou um caracter diferente se o arquivo de entrada estiver com campos mal posicionados 
              *NcaracteresEntrada1 +=1;

              //Parte 2 - Escrita
              gravaCampoComSep(estrutura.ra, Ncaracteres1, novo);//RA
              gravaCampoComSep(estrutura.nome, Ncaracteres1, novo);//NOME
              gravaCampoComSep(estrutura.cidade,Ncaracteres1, novo);//CIDADE
              gravaCampoComSep(estrutura.telres,Ncaracteres1,novo);//TELEFONE RESIDENCIAL
              gravaCampoComSep(estrutura.telalt,Ncaracteres1,novo);//TELEFONE ALTERNATIVO
              fputc(estrutura.sexo,novo);//SEXO
              *Ncaracteres1+=1;
              fputc(SEPARADOR, novo);
              *Ncaracteres1+=1;
              gravaCampoComSep(estrutura.curso,Ncaracteres1,novo);//CURSO
              fputc(FIMREGISTRO, novo);
              *Ncaracteres1+=1;
              if(feof(file) || aux2==EOF){//Verifica se chegou ao fim do arquivo
                    *Nregistro+=1;
                    fclose(file);
                    fclose(novo);
                    return TRUE;
              }
              else if(aux2=='\n'){//Chegou ao fim da linha
                    *Nregistro+=1;
                    fputc('\n',novo);
              }
              else{
                    fprintf(stderr, "Mensagem de erro1");
                    fclose(file);
                    fclose(novo);
                    return FALSE;
              }
    }
    fclose(file);
    fclose(novo);*/
    return TRUE;
}

int getNumberOfRecords(char *filePath, int size){
    FILE *file = fopen(filePath, "r");
    long l=-1;
    if(!file==NULL){
        fseek(file, 0, SEEK_END);
        l = ftell(file);
        fclose(file);
        l/=size;
    }
    return l;
}

int countCharsFile(char *filePath){
    char auxChar;
    int count;
    count = 0;
    FILE *p;
    p = fopen(filePath,"r");
    if (!p){
        return -1;
    }
    while ((auxChar = getc(p)) != EOF){
        count++;
    }
    fclose(p);
    return count;
}
